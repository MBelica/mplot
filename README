# MPlot  


## General
* Compiled with Java 1.7
* UML Diagrams: in doc folder


## Compile (I think this isn't up to date)
* javac -cp "lib/*" -d "bin/" src/*.java
* run: (e.g. MPlotTest1)
* java -cp "bin/:lib/*" test


## Structure
* MPlot (+)
** main file
** contains only static to be called by user
* Utilities (-)
**  contains all function want to call from several files
** or could belong into MPlot but aren't mentioned for users
* Figure (-)
** creates simple Frame
* Data (-)
**  responsible for conversion of user input into datatable
* Plot (-)
** main file for creating plot including points and lines


## Plan for further development
1. Clean files, 
1. Write output/debug output into file
1. Write help function
1. UML * class-diagramm, * sequence-diagramm
1. Javadoc


## At this point the main work (of our first part/version) is done, the question is how to go on:
* either rewrite package with namespaces, generics and strict java doc to have a safer and more elegant code. This would mean a lot of work, getting a core, writing it very modular so defenetly many advantages but the question remains if this would be necessairy
* or add all (possible) linespecs and colors missing + some cleaning. This would... lets say finish this branch completely 
* or add other plot library - to test the flexibility of our code. Idea for that: add interface between interface between groot and plot to convert data and pass them to right plot library


## Idea for function hold
for each plot check if plot exists in newest frame
    * no: plot
    * yes: check if hold has been callen
        - no: clear frame and repaint
        - yes: draw both


## Dispose JFrame 
Depending on how many graphs active dispose or close JFrame and delete MPlot instance?